---
description: 
globs: "**/*.tsx", "**/*.jsx"
alwaysApply: false
---
---
description: 
globs: "**/*.tsx", "**/*.jsx"
alwaysApply: false
---

# Ensure Component Structure

## Context
- This rule applies to React component files written in TypeScript and JSX
- Ensures consistent component organization and naming
- Facilitates easier code navigation and maintenance

## Critical Rules
- Name React components using PascalCase format
- Define each component in its own file
- Name the file the same as the component (e.g., Button.tsx for Button component)
- Export the component as the default export
- Group related components in appropriate directories
- Include prop type definitions using TypeScript interfaces or type aliases
- Keep component files focused on a single responsibility

## Examples

<example>
```tsx
// Good: Button.tsx
import React from 'react';

// Props interface with the same name as component + "Props" suffix
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'tertiary';
  size?: 'small' | 'medium' | 'large';
  onClick?: () => void;
  disabled?: boolean;
  children: React.ReactNode;
}

// PascalCase component name matching file name
const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'medium',
  onClick,
  disabled = false,
  children
}) => {
  return (
    <button
      className={`btn btn-${variant} btn-${size}`}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
};

// Default export with the same name as file
export default Button;

// Good: UserCard.tsx
import React from 'react';
import Avatar from './Avatar';
import Badge from './Badge';

interface UserCardProps {
  user: {
    id: string;
    name: string;
    avatar: string;
    role: string;
  };
}

const UserCard: React.FC<UserCardProps> = ({ user }) => {
  return (
    <div className="user-card">
      <Avatar src={user.avatar} alt={user.name} />
      <h3>{user.name}</h3>
      <Badge type={user.role}>{user.role}</Badge>
    </div>
  );
};

export default UserCard;
```
</example>

<example type="invalid">
```tsx
// Bad: Multiple unrelated components in one file
import React from 'react';

// Multiple components in one file
export const Button = ({ children, onClick }) => {
  return <button onClick={onClick}>{children}</button>;
};

export const Card = ({ title, content }) => {
  return (
    <div className="card">
      <h2>{title}</h2>
      <p>{content}</p>
    </div>
  );
};

// Bad: camelCase component name
const userProfile = ({ user }) => {
  return (
    <div>
      <img src={user.avatar} alt={user.name} />
      <h2>{user.name}</h2>
    </div>
  );
};

export default userProfile;

// Bad: File name doesn't match component name (if this file is named profile.tsx)
const UserDetails = ({ user }) => {
  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
      <p>{user.location}</p>
    </div>
  );
};

export default UserDetails;
```
</example>